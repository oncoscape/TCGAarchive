toJSON(test)
mongo.manifest$insert(toJSON(test, auto_unbox = T))
t2 <- toJSON(test)
t2
mongo.manifest$insert(t2)
mongo.manifest$insert(test)
mongo.manifest$insert(oCollection)
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
oCollection.loadings
toJSON(oCollection.loadings)
lookupList = list(
cnv=list(type="molecular",
data.load = "os.data.load.molecular",
insert.lookup = "insert.lookup.sourceTypeCollection",
insert.document = "insert.document.molecular" ),
mut=list(type="molecular",
data.load = "os.data.load.molecular",
insert.lookup = "insert.lookup.sourceTypeCollection",
insert.document = "insert.document.molecular" ),
mut01=list(type="molecular",
data.load = "os.data.load.molecular",
insert.lookup = "insert.lookup.sourceTypeCollection",
insert.document = "insert.document.molecular" ),
rna=list(type="molecular",
data.load = "os.data.load.molecular",
insert.lookup = "insert.lookup.sourceTypeCollection",
insert.document = "insert.document.molecular" ),
protein=list(type="molecular",
data.load = "os.data.load.molecular",
insert.lookup = "insert.lookup.sourceTypeCollection",
insert.document = "insert.document.molecular" ),
methylation=list(type="molecular",
data.load = "os.data.load.molecular",
insert.lookup = "insert.lookup.sourceTypeCollection",
insert.document = "insert.document.molecular" ),
psi=list(type="molecular",
data.load = "os.data.load.molecular",
insert.lookup = "insert.lookup.sourceTypeCollection",
insert.document = "insert.document.molecular" ),
facs=list(type="molecular",
data.load = "os.data.load.molecular",
insert.lookup = "insert.lookup.sourceTypeCollection",
insert.document = "insert.document.facs" ),
mds=list(type="calculated",
data.load = "os.data.load.XXX",
insert.lookup = "insert.lookup.sourceTypeCollection",
insert.document = "insert.document.list" ),
pcaScores=list(type="calculated",
data.load = "os.data.load.XXX",
insert.lookup = "insert.lookup.sourceTypeCollection",
insert.document = "insert.document.list" ),
pcaLoadings=list(type="calculated",
data.load = "os.data.load.XXX",
insert.lookup = "insert.lookup.sourceTypeCollection",
insert.document = "insert.document.list" ),
chromosome=list(type="location",
data.load = "run.scale.chr.genes;saveChromosome_Coordinates",
insert.lookup = "insert.lookup.sourceTypeCollection",
insert.document = "insert.document.list" ),
centromere=list(type="location",
data.load = "saveCentromere_Coordinates",
insert.lookup = "insert.lookup.sourceTypeCollection",
insert.document = "insert.document.list" ),
genes=list(type="location",
data.load = "run.scale.chr.genes",
insert.lookup = "insert.lookup.sourceTypeCollection",
insert.document = "insert.document.list" ),
annotation=list(type="annotation",
data.load = "os.data.load.annotation",
insert.lookup = "insert.lookup.sourceTypeCollection",
insert.document = "insert.document.row" ),
genesets=list(type="category",
data.load = "os.data.load.json",
insert.lookup = "insert.lookup.sourceTypeCollection",
insert.document = "insert.document.list" ),
color=list(type="category",
data.load = "os.data.load.categories",
insert.lookup = "insert.lookup.sourceTypeCollection",
insert.document = "insert.document.list" ),
edges=list(type="edges",
data.load = "os.data.load.XXX",
insert.lookup = "insert.lookup.network",
insert.document = "insert.document.edges" ),
events=list(type="clinical",
data.load = "os.data.load.clinical.events",
insert.lookup = "insert.lookup.clinical",
insert.document = "insert.document.list" ),
patient=list(type="clinical",
data.load = "os.data.load.clinical",
insert.lookup = "insert.lookup.clinical",
insert.document = "insert.document.row" ),
drug=list(type="clinical",
data.load = "os.data.load.clinical",
insert.lookup = "insert.lookup.clinical",
insert.document = "insert.document.row" ),
radiation=list(type="clinical",
data.load = "os.data.load.clinical",
insert.lookup = "insert.lookup.clinical",
insert.document = "insert.document.row" ),
followUp=list(type="clinical",
data.load = "os.data.load.clinical",
insert.lookup = "insert.lookup.clinical",
insert.document = "insert.document.row" ),
newTumor=list(type="clinical",
data.load = "os.data.load.clinical",
insert.lookup = "insert.lookup.clinical",
insert.document = "insert.document.row" ),
`newTumor-followUp`=list(type="clinical",
data.load = "os.data.load.clinical",
insert.lookup = "insert.lookup.clinical",
insert.document = "insert.document.row" ),
otherMalignancy=list(type="clinical",
data.load = "os.data.load.clinical",
insert.lookup = "insert.lookup.clinical",
insert.document = "insert.document.row" )
)
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
oCollection
names(lookupList)
oCollection$dataType
oCollection
oCollection
oCollection
class(data.list[[lookupType]]
)
data.list[[lookupType]]
lookupType
data.list[[lookupType]]
data.list
mongo.lookup$find("{disease:'brain'}")
mongo.lookup$find('{disease:"brain"}')
query = list("disease"="brain")
query = toJSON(list("disease"="brain"))
query
query = toJSON(list("disease"="brain"), auto_unbox = T)
query
mongo.lookup$find(query)
oLookup = mongo.lookup$find(query)
field = "molecular"
oLookup <- mongo.lookup$find(query, fields = paste("{",field,":1}", sep=""))
oLookup <- mongo.lookup$find(query, fields = paste("{"',field,"':1}", sep=""))
field = toJSON(list(lookupList[[oCollection$dataType]]$type = 1))
toJSON(list(lookupList[[oCollection$dataType]]$type = 1))
fields=list()
oCollection
fields = list(); fields[[lookupList[[oCollection$dataType]]$type]] = 1;
fields
toJSON(fields)
fields=list()
fields = list(); fields[[lookupList[[oCollection$dataType]]$type]] = 1;
oLookup <- mongo.lookup$find(query, fields = toJSON(fields, auto_unbox = T))
oLookup
mongo.lookup$find(query)
fields
toJSON(fields)
fields=list()
fields[["dummy"]]=1
toJSON(fields)
oLookup <- mongo.lookup$find(query, fields = toJSON(fields, auto_unbox = T))
oLookup
length(oLookup)
class(oLookup)
dim(oLookup)
names(oLookup)
fields[["molecular"]]=1
fields
fields$dummy = NULL
oLookup <- mongo.lookup$find(query, fields = toJSON(fields, auto_unbox = T))
oLookup
dim(oLookup)
query
query$disease = "dummy"
query
query = toJSON(list("disease"="dummy"), auto_unbox = T)
query
oLookup <- mongo.lookup$find(query, fields = toJSON(fields, auto_unbox = T))
oLookup
dim(oLookup)
query = toJSON(list("disease"="brain"), auto_unbox = T)
oLookup <- mongo.lookup$find(query, fields = toJSON(fields, auto_unbox = T))
oLookup
fields
add.collection <- data.frame(source=oCollection$source, type=oCollection$dataType, collection=oCollection$collection)
lookupType = lookupList[[oCollection$dataType]]$type
lookupType
data.list = oLookup
data.list
names(data.list)
data.list[lookupType]<- list(add.collection)
class(data.list[[lookupType]])=="list"
data.list[[lookupType]]<- rbind(data.list[[lookupType]], add.collection)
data.list[[lookupType]]
add.collection
rbind(data.list[[lookupType]], add.collection)
data.list[lookupTypte] = rbind(data.list[[lookupType]], add.collection)
data.list[lookupType] = rbind(data.list[[lookupType]], add.collection)
data.list[lookupType]
data.list[lookupType] = NULL
data.list[lookupType]<- list(add.collection)
data.list[lookupType]
data.list[[lookupType]]
rbind(data.list[[lookupType]], add.collection)
data.list[[lookupType]]<- list(rbind(data.list[[lookupType]], add.collection))
data.list[[lookupType]]
toJSON(data.list)
data.list$molecular = NULL
data.list
data.list$_id = NULL
data.list$`_id` = NULL
mongo.lookup$update(query, toJSON("$set"=data.list, auto_unbox = T))
mongo.lookup$update(query, toJSON(list("$set"=data.list), auto_unbox = T))
list("$set"=data.list)
toJSON(list("$set"=data.list), auto_unbox=T)
toJSON(c("$set"=data.list), auto_unbox=T)
toJSON(data.frame("$set"=data.list), auto_unbox=T)
setstr = paste("$set:", toJSON(data.list, auto_unbox = T))
setstr
add.collection
mongo.lookup$update(query,"{$push: {molecular:'test'}}" )
pushL = list("$push"=add.collection)
pushL
toJSON(pushL)
pushL = list("$push"=c("molecular"=add.collection))
pushL
toJSON(pushL, auto_unbox = T)
pushL = list("$push"=list("molecular"=add.collection))
toJSON(pushL, auto_unbox = T)
mongo.lookup$update(query,toJSON(pushL, auto_unbox = T))
add.collection
mongo.lookup$update(query,toJSON(unbox(pushL), auto_unbox = T))
coll <- as.list(add.collection)
coll
pushL = list("$push"=list("molecular"=coll))
toJSON(pushL, auto_unbox = T)
mongo.lookup$update(query,toJSON(pushL, auto_unbox = T))
lookupType
pushL = list("$push"=list(lookupType=add.collection))
pushL
eval(lookupType)
pushL = list("$push"=list(eval(lookupType)=add.collection))
new.collection = list(); new.collection[[lookupType]] = add.collection
pushL = list("$push"=new.collection)
pushL
lookupType = "dummy"
add.collection = list(source="fake", type="dada")
new.collection = list(); new.collection[[lookupType]] = add.collection
push.collection = list("$push"=new.collection)
#    if(class(data.list[[lookupType]])=="list")
push.collection
toJSON(push.collection)
mongo.lookup(toJSON(list(disease="brain"),auto_unbox = T), toJSON(push.collection, auto_unbox = T))
mongo.lookup$update(toJSON(list(disease="brain"),auto_unbox = T), toJSON(push.collection, auto_unbox = T))
mongo.lookup$update(toJSON(list(disease="brain"),auto_unbox = T), toJSON(push.collection, auto_unbox = T))
query
query = toJSON(list(disease="brain"), auto_unbox = T)
oLookup <- mongo.lookup$find(query)
length(oLookup)
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
geneset
class(genesets)
dim(genesets)
names(genesets)
genesets$name
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
geneset
genesetName
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
genesetName
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
geneset
genesets
genesets$name
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
geneset
genesetName
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
geneset
genesets[genesets$name == geneset_name,]
genes = genesets[genesets$name == geneset_name,"genes"]
class(genes)
geneset_name = "blah"
genesets[genesets$name == geneset_name,"genes"]
unlist(genesets[genesets$name == geneset_name,"genes"])
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
mongo.manifest$find(toJSON(list(dataset="hg19",dataType="chromosome", process=list(scale=scaleFactor))))
toJSON(list(dataset="hg19",dataType="chromosome", process=list(scale=scaleFactor)))
chrPosScaledObj <- mongo.manifest$find(toJSON(list(dataset="hg19",dataType="chromosome", process=list(scale=scaleFactor)), auto_unbox = T))
query = toJSON(list(dataset="hg19",dataType="chromosome", process=list(scale=scaleFactor)), auto_unbox = T)
scaleFactor = 100000
query = toJSON(list(dataset="hg19",dataType="chromosome", process=list(scale=scaleFactor)), auto_unbox = T)
query
chrPosScaledObj = mongo.manifest$find(query)
chrPosScaledObj$collection
chrCoord <- mongo(chrPosScaledObj$collection, db=db, url=host)$find()
chrCoord
class(chrCoord)
chrCoord <- mongo(chrPosScaledObj$collection, db=db, url=host)$find()$data
chrCoord
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
process
list(disease=oCollection$dataset,source=oCollection$source, type=process$input, geneset=genesetName,scale=scaleFactor, pc1=propVar[1], pc2=propVar[2] ,pc3=propVar[3],data=scores.list)
result <- list(disease=oCollection$dataset,source=oCollection$source, type=process$input, geneset=genesetName,scale=scaleFactor, pc1=propVar[1], pc2=propVar[2] ,pc3=propVar[3],data=scores.list)
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
class(oCollection)
oCollection
names(oCollection)
oCollection$process
class(oCollection$process)
process
newCollection = as.list(oCollection)
newCollection$process = process
newCollection
toJSON(newCollection, auto_unbox = T)
oCollection$process
process
unlist(process)
newCollection$process = unlist(process)
toJSON(newCollection, auto_unbox = T)
process[[1]]
class(process[[1]])
newCollection$process = process[[1]]
toJSON(newCollection, auto_unbox = T)
newCollection$process = unlist(process[[1]])
toJSON(newCollection, auto_unbox = T)
newCollection$process = as.list(process[[1]])
toJSON(newCollection, auto_unbox = T)
length(process)
process
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
process
process <- list(calculation="prcomp", geneset= genesetName)
process$input=oCollection$dataType
process
oCollection$dataType
process$scale=scaleFactor
process$center="TRUE"; process$scaled="TRUE"
process
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
result <- list(disease=oCollection$dataset,source=oCollection$source, type=process$input, geneset=genesetName,scale=scaleFactor, pc1=propVar[1], pc2=propVar[2] ,pc3=propVar[3],data=scores.list)
names(result)
result$type
newCollection$process = process
process
newCollection$process = list(process)
toJSON(newCollection, auto_unbox = T)
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
scores.list[[1]]
length(scores.list)
class(scores.list[[1]])
mtx <- pc3
dim.names=c("x", "y", "z")
mtx <- apply(mtx, 2, function(col){ -1* min(col) + col})
mtx.max <- apply(mtx, 2, max)
r2Chr <- sum(chrDim*chrDim)
r2Mtx <- sum(mtx.max*mtx.max)
scale <- sqrt(r2Chr/r2Mtx)
mtx <- mtx * scale
mtx <- round(mtx)
name = rownames(mtx)[1]
name
t(mtx[name,dim.names])
class(t(mtx[name,dim.names]))
as.list(t(mtx[name,dim.names]))
vals <- as.list(t(mtx[name,dim.names]));
names(vals) = dim.names
vals
list.coord <- lapply(rownames(mtx), function(name){
vals <- as.list(t(mtx[name,dim.names]));
names(vals) = dim.names
vals
})
list.coord[[1]]
names(list.coord) <- rownames(mtx)
scores.list = list.coord
names(scores.list)[1:5]
toJSON(scores.list, auto_unbox = T)
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
tbl1
bl2
tbl2
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
oCollection.cnv
class(lCollection.cnv)
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
oCollection.cnv
oCollection
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
lCollection.cnv
oCollectiom
oCollection
View(oCollection.cnv)
nrow(lCollection.cnv)
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
lCollection.cnv
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
class(tbl1)
dim(tbl1)
tbl1
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
toJSON(oCollection.mds)
toJSON(oCollection.mds, auto_unbox = T)
oCollection.mds        = update.oCollection(oCollection.mds,        process=process)
toJSON(oCollection.mds, auto_unbox = T)
oCollection.1
parent.1 <- mongo.manifest$find(oCollection.1, fields=list('_id'=1))
parent.1 <- mongo.manifest$find(oCollection.1, fields=toJSON(list('_id'=1), auto_unbox = T))
toJSON(list('_id'=1), auto_unbox = T)
parent.1 <- mongo.manifest$find(toJSON(oCollection.1, auto_unbox = T), fields=toJSON(list('_id'=1), auto_unbox = T))
oCollection.1
toJSON(oCollection.1, auto_unbox = T)
parent.1 <- mongo.manifest$find(toJSON(list(collection=oCollection.1$collection), auto_unbox=T), fields=toJSON(list('_id'=1), auto_unbox = T))
parent.1
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
toJSON(oCollection.mds, auto_unbox = T)
toJSON(oCollection.mds.scaled, auto_unbox = T)
oCollection.mds = create.oCollection(dataset=datasetName, dataType=dataType,
source=c(oCollection.1$source, oCollection.2$source),
processName=outputName,
parent= c(parent.1, parent.2),
process=process)
toJSON(oCollection.mds, auto_unbox = T)
parent.1
toJSON(parent.1)
toJSON(parent.1, auto_unbox = T)
toJSON(list(parent.1,parent.2), auto_unbox = T)
toJSON(unbox(list(parent.1,parent.2)), auto_unbox = T)
toJSON(list(parent.1,parent.2), auto_unbox = T)
toJSON(c(parent.1,parent.2), auto_unbox = T)
toJSON(data.frame(parent.1,parent.2), auto_unbox = T)
toJSON(oCollection.mds, auto_unbox = T)
toJSON(oCollection.mds.scaled, auto_unbox = T)
oCollection.1$collection
coll1 <- mongo(oCollection.1$collection, db=db, url=host)$find()
coll2 <- mongo(oCollection.2$collection, db=db, url=host)$find()
dim(mtx.tbl1)
mtx.tbl1[1:5,1:5]
dim(mtx.tbl2)
geneset
tbl1.samples[1:5]
mtx.tbl1 <- t(mtx.tbl1)
mtx.tbl1[1:5,1:5]
tbl1.samples <- grep(regex, rownames(mtx.tbl1),  value=TRUE)
tbl2.samples <- grep(regex, rownames(mtx.tbl2),  value=TRUE)
tbl1.samples[1:5]
genes <- intersect(colnames(mtx.tbl1), colnames(mtx.tbl2))
genes[1:5]
colnames(mtx.tbl1)[1:%]
colnames(mtx.tbl1)[1:5]
colnames(mtx.tbl2)[1:5]
mtx.tbl2 <- t(mtx.tbl2)
tbl2.samples <- grep(regex, rownames(mtx.tbl2),  value=TRUE)
genes <- intersect(colnames(mtx.tbl1), colnames(mtx.tbl2))
genes[1:5]
samples <- unique(tbl1.samples, tbl2.samples)
mtx.tbl1[1:5,1:5]
mtx.tbl2 <- t(mtx.tbl2)
mtx.tbl1 <- t(mtx.tbl1)
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
oCollection.1
oCollection.2
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
debugSource('~/Desktop/OncoGit/TCGAarchive/scripts/networks.calculate.mds.edges.R')
setwd("/Volumes/STTR/TCGAarchive/scripts")
debugSource('/Volumes/fh/fast/_HB/STTR/TCGAarchive/scripts/tcga.import.R')
password = "gQx4T4bbCmM04Cu"
host<- paste("mongodb://",user,":",password,"@oncoscape-dev-db1.sttrcancer.io:27017,oncoscape-dev-db2.sttrcancer.io:27017,oncoscape-dev-db3.sttrcancer.io:27017", sep="")
debugSource('/Volumes/fh/fast/_HB/STTR/TCGAarchive/scripts/tcga.import.R')
password = "gQx4T4bbCmM04Cu"
host<- paste("mongodb://",user,":",password,"@oncoscape-dev-db1.sttrcancer.io:27017,oncoscape-dev-db2.sttrcancer.io:27017,oncoscape-dev-db3.sttrcancer.io:27017", sep="")
debugSource('/Volumes/fh/fast/_HB/STTR/TCGAarchive/scripts/tcga.import.R')
password = "gQx4T4bbCmM04Cu"
host<- paste("mongodb://",user,":",password,"@oncoscape-dev-db1.sttrcancer.io:27017,oncoscape-dev-db2.sttrcancer.io:27017,oncoscape-dev-db3.sttrcancer.io:27017", sep="")
class(ids)
ids[[1]]
ids[[2]]
names(ids)[1:5]
dim(result)
length(result)
rownames(result$data)[1:5]
debugSource('/Volumes/fh/fast/_HB/STTR/TCGAarchive/scripts/tcga.import.R')
password = "gQx4T4bbCmM04Cu"
host<- paste("mongodb://",user,":",password,"@oncoscape-dev-db1.sttrcancer.io:27017,oncoscape-dev-db2.sttrcancer.io:27017,oncoscape-dev-db3.sttrcancer.io:27017", sep="")
debugSource('/Volumes/fh/fast/_HB/STTR/TCGAarchive/scripts/tcga.import.R')
password = "gQx4T4bbCmM04Cu"
host<- paste("mongodb://",user,":",password,"@oncoscape-dev-db1.sttrcancer.io:27017,oncoscape-dev-db2.sttrcancer.io:27017,oncoscape-dev-db3.sttrcancer.io:27017", sep="")
geneName = rownames(result$data)[1]
geneName
toJSON( c(result$ids[geneName], list( min=min(result$data[geneName,]), max=max(result$data[geneName,]))), auto_unbox = T)
result$ids[geneName]
result$ids[[geneName]]
toJSON( c(result$ids[[geneName]], list( min=min(result$data[geneName,]), max=max(result$data[geneName,]))), auto_unbox = T)
debugSource('/Volumes/fh/fast/_HB/STTR/TCGAarchive/scripts/tcga.import.R')
password = "gQx4T4bbCmM04Cu"
host<- paste("mongodb://",user,":",password,"@oncoscape-dev-db1.sttrcancer.io:27017,oncoscape-dev-db2.sttrcancer.io:27017,oncoscape-dev-db3.sttrcancer.io:27017", sep="")
